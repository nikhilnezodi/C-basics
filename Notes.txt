Declaration: Tells the compiler that I have a variable i of datatype integer. Don't allocate any memory. It has memory allocated by some other program.
Definition: I have a variable of type datatype. Also allocate some memory for the variable.

int i; (Declaration+Definition)

extern int i; (Declaration)

====================================================================================
Pointers

        data_type * pointer_name;
for eg. int * p;
here p is a pointer of a memory location that stores integer value 
                    OR 
p stores address of a variable of type int

int a; ==> then &a represents address of a
p = &a; // so now p essentially points to address of a

p is also a variable that will be allocated a memory

* p = 10; this will modify the data stored at memory location of a

pointer can be helpful in accessing, reading/writing a given memory location.


suppose i want to point to 0x600
p = 0x600;
p+5 //now it will point to 0x605

================================================================================
//Structures
Struct is a user defined datatype
syntax of struct==>

struct student{
        int student_id;
        int class;
        int age;
        char * name;
};

struct student s;

To access student_id of this struct==> s.student_id
=================================================================================

Bitwise Operators - Used to read/modify certain bit of a byte [Bitwise Manipulation]
1. AND Operator (&) - 
2. OR Operator (|) - 
3. XOR Operator (^) -
4. NOT Operator (~) -
5. Left Shift (<<) -
6. Right Shift (>>) -

eg. A = 10110101
    B = 01101101
  A&B = 00100101
  A|B = 11111101 
  A^B = 11011000
   ~A = 01001010
 A<<1 = 01101010
 A>>1 = 01011010
===================================================================================
 Functions - 

 return_type function_name(argument); //Function Declaration
 for eg. 
 int add(int a, int b);

 return_type function_name(argument)    //Function Definition
 {
        // operations
        return data
 }

int add(int a, intb)
{
        int sum = a+b;
        return sum;
}


eg. f = add(5,3); //Function call
=========================================================================================
Qualifiers - 
Qualifiers when used with variables, it can change the property of that variable
1. Size - short, long, long long

eg. int var; //size = 4 bytes
    short int var; //size = 2 bytes
    long int var; //size = 8 bytes
    double var ==>8bytes
    long double var ==> 8/16 bytes
    long long int var ==> 8 bytes
----------------------------------------------------------------------------------
2. Signed - signed , unsigned
   int a; -> +ve,0,-ve
   unsigned int a; -> 0,+ve
   signed int a; -> -ve,0,+ve (default qualifier)

   for eg. signed int a; ->4 bytes = 32 bits.
   MSB is signed bit => 0 - then remaining 31 bits are positive
                        1 - then remaining 31 bits are negative
           unsigned int a; -> all 32 bits for the value of the variable 
           Hence - unsigned int max values (2^32 -1)
                   signed int max values   (2^31 - 1)
----------------------------------------------------------------------------------
3. Type - const, volatile
   const => variable declared will be read-only. cannot be modified.

   const int a = 10;
   a= 20; //not allowed

   const int b; //such a declaration is also not allowed

   const can also be used for Pointers
   int a;
   int b;
   const int * p = &a; // it creates a pointer p of type const int 
                       // pointer p points to a memory location of type const int
        *p =20; is not allowed
        p=&b; // This is allowed

        1. A pointer to a const integer
           int a;
           int b;
           const int * p;
           p=&a; //valid because p itself is not a constant
           *p=30; // invalid because the memory location that p is pointing to is constant
           p=&b; //valid

        2. constant pointer
           int * const p; //p variable itself is constant; but will point to some garbage location
           p=&a; //not valid. memory of p cannot be modified
           *p = 20; //valid
           int * const cp = &a; //valid ; now cp cannot be modified
           *cp = 45; //valid. value can be modified
        3. constant pointer to constant integer
           const int * const ptr; // pointer value and location both are constant.

           eg. int a;
               int b;
               const int * const p = &a; //valid
                &p=b; //invalid becuase the data ptr is pointing to is const
                *p=20; //invalid becuase the ptr is const
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`           
   volatile 
   ==> [with primitve datatypes]
   - it tells the compiler that the value of the variable can change unexpectedly without knowledge of compiler/current execution flow
   - It changes the assembly instructions the compiler generates
   int volatile a; or volatile int a;
   a = 10; ==> it tells the compiler that value of the variable can change anytime so whenever you're reading this variable a, 
                always go and fetch it from memory location

   case 1: when not using volatile--
   int a =20;
   a=a+5; {Load r [a] ; Add r #5}
   a=a+9; {Add r #9 ; store r [a]}
   printf("%d",a);

   case 2: when using volatile--
   int volatile b = 20;
   b=b+5; {Load r [b] ; Add r #5 ; store r [b]}
   b=b+9; {Load r [b] ; Add r #9 ; store r [b]}
   printf("%d",b)

  Use case: if someone tries to modify the variable externally 
  for eg. 
  in case 1 after adding 5 if from outside a = 10
  still final print output will be 34

  in case 2 after adding 5 if from outside b = 10
  final print output will be 19

  volatile
  ==> [with pointers ]
  1. A pointer to a volatile datatype
     
     volatile int * ptr; // This pointer points to a variable that is volatile. pointer itself is not volatile.
  
  2. A volatile pointer to a non-volatile data
     int * volatile ptr; // pointer itself is volatile but data/memory location it is pointing to is non-volatile.
  
  3. A volatile pointer to a volatile data/datatype
     volatile int * volatile ptr; pointer is volatile; memory location is also volatile

  Applications: 
     Memory Mapped peripheral register.
     Global variable modified by an ISR (Interrupt Service Routine).
     Global Variable within a multithreaded application.

     if address 0xDEADFEED is a memory mapped address to a peripheral.
     int * p  = 0xDEADFEED; and suppose data stored at this adderess is 0
     while (*p != 1)
     {
        //statements;
     }
     now its assembly will look like this
     load r @p
     while(r!=1)
     {
        //statements;
     }
     This will be an infinite loop as even if the peripheral data changes to 1, r is still 0.

     instead if we use 
     volatile int * p;
     while (*p != 1)
     {
        //statements;
     }
     its assembly will look like:
     load r @p
     while ([load r @p] != 1)
     {
        statements;
     }
     so it will exit the while loop when data is modified to 1
==================================================================================     
Global and Static variables

   -global variables are defined outside of the functions after header imports.
    can be used throughout the file and can be modified.

   -static variable is declared and initialized only once and can be used across multiple function calls.
    its value is preserved across multiple calls.

   -by default a function is extern. That means the function can be used outside the file in other files also
    if a function is prefixed by static. It cannot be used outside the scope of the file.

=====================================================================================
Memory Layout of a C program
   - Suppose you have a file main.c . Within this you have multiple 
     functions (one of them being main()), header files, global/local/static variables, 
     dynamically allocated memory, code of the program.
     When you compile this file using gcc compiler tool chain, you get a binary file named "a.out"
     This binary file is not readable as it is in binary.

     When this file is executed, what an OS does is it will load the entire binary into the RAM.
     While loading this binary into RAM, it will segregate the entire program into 5 segments
     and it will load all those segments onto your RAM. Namely-
     1. Text
     2. initialized data segment
     3. BSS (uninitialized data segment)
     4. Heap
     5. Stack

      _______      
     | stack |  <---Highest memory
     |  |    |
     |  V    |
      -------
     |   ^   |
     |   |   |
     | heap  |
      -------
     | init  | <--global/static variables with inital value assigned by user
      -------
     | BSS   | <--global/static variables with no inital value assigned by user
      -------
     | code  | <--Read Only
     |       | <--Lowest Memory
      -------




     1. Text Segment -
        starts at the lowest memory location of all the segments. This is where our code is stored.
        we can also call it code segment. It is read-only. Cannot be derefenced and modified.

     2. Data Segment - 
        Gets memory just above code segment. It is of two types.
        (a) Uninitialized data segment (BSS)
        (b) initialized data segment - readonly & read-write

        variable declared as global or static gets memory allocated from this data segment.

        A global/static variable is explicity initialized with an initial value - 
        it gets memory allocation from initialized data segment

        A global/static value with no initial value gets memory allocated from BSS segment.
        It has default initial value 0.
      
     3. Heap segment
        All dynamic memory allocation that happens during execution of the program gets 
        memory from heap segment. It starts at data segment +1 and grows upward (from lower memory 
        locations to upper memory locations) as program executes if more memory required.
        For memory allocation, library functions are used to perform dynamic memory allocations.
        for. eg. ptr = malloc(20); -> to request bytes memory to the heap area and we get the pointer 
        of starting address of that memory allocation.
        we can also use alloc()

     4. Stack segment
        Stack starts at the highest memory location and grows downwards.
        Variable declared as local variable gets the memory from stack. 
        -Any variable which is part of the function and not static/global, 
        that variable gets the memory from stack. 
        -All the function arguments get the memory from stack.
        -Return address in the caller function. 
         |->eg. A() and B() exists and B() is called inside A(), 
           it has to return back to the line where it was called inside A() after its execution.
           so the address of B() instruction is stored in stack segment.
==============================================================================================

void keyword

 void keyword is a special datatype.
 It tells the compiler that there is no data involved OR
 if data is involved, that data is of no type.

 1. Void represented as No Data -

 Here void tells the compiler that the function will not return any thing.
 void printA(int A)
 {
   //statements;
   return;
 }

 void tells compiler that this function does not accept any arguments, so if any arguments are
 passed to the function, it will be compilation error.
 void printA(void)
 {
   //statements;
   return;
 }
      
 2. Void Represented as No Type

 A pointer declared as void has no type, it can point to any data.
 void * ptr; // A void pointer


 eg. void * ptr;
    int a;
    char c;
    ptr = &a; //valid
    ptr = &c; //also valid
    dereferencing on a void pointer is not allowed.
    it would not know how many bytes are stored at the location it points to.

    So how do we access data pointed by void pointer??
    By converting void pointer into integer or character pointer first [i.e. Typecasting]
    int * p = (int *) ptr;

    or 

    char * cp;
    cp = (char *) ptr;

=========================================================================================

Create an image using C 
 
 Image is just a file which has set of properties and attributes that is used to specify that particular image.

 For eg. File.png 
 -> File header (This data is specifically created by properties of that file)
 -> File Data (Actual Data we want to store in that file)

 Given file can have following properties/metadata/attributes:
 1. Type
 2. Size
 3. Creation date
 4. Modification date
 5. Height
 6. Width
      .
      .
      .
 These properties are stored in the file header.
 The specification of where goes what kind of attributes will be specified by File Format.

 File Data will have the actual image data or the pixels of the image.
 3x4 (heightxwidth) image.
 3x4=12 pixels.
 each pixels will store 3 values - intensity of red, intensity of green, intensity of blue.
 depending on the intensity, a unique colour will be assigned to the pixel.

 Size of the file data = h x w x 3 x 1 byte = 3hw bytes
 Actual size is determined by the file Format

 BMP (Bitmap) Image Format

  File.bmp contains 3 sections - Header, info header, data section
  Header is of 14Bytes -  1st 2 bytes for type of the file
                        following 4 bytes for size of the file (size of (header + info header + data))
                        4 Bytes reserved
                        4 Bytes Offset of the data [first byte of the data]

  InfoHeader is of 40 Bytes - first 4 Bytes -> sizeof(info heafer)
             4 Bytes -> width & height
             rest -> info around that image is stored.

  Data section is 3xwxh Bytes

  If a file is created and write these information in the above mentioned 
  format, it becomes a bmp file.

  void * ptr;
  ptr = malloc (header_size + infoheader_size + 3xhxw)
  if i want to point to first two bytes and modify the file type. i will have to 
  typecast the pointer as unsigned short (because it is 2bytes)

  unsigned short * usptr = (unsigned short *) ptr
  *usptr = "BM"  //now you have modified the type of thsi bmp file as BM
  
  now if i want to write the size of infoheader.
  To modify a specifc field
  1. offset of the field.
  2. advance pointer to that offset - > ptr = ptr + offset;
  3. type of data stored  at the offseted field
  4. typecasting into appropriate pointer -> int * iptr = (int *) ptr;
  5. deference and assign value -> *iptr = 40; //size of infoheader is 40

  So many operations to modify just one specifc field.
  if there are hundreds of field, this implementation becomes complex and prone to errors.
  And only for this purpose C has provided us with structures.
  So struct is a way to organise such kind of a data. Structure can make this implementation very simple.

  struct Header{
   unsigned short type_of_file;
   int size;
   int reserved;
   int offset;
  }
  struct Header hdr;
  hdr.size = 2;

  



