Declaration: Tells the compiler that I have a variable i of datatype integer. Don't allocate any memory. It has memory allocated by some other program.
Definition: I have a variable of type datatype. Also allocate some memory for the variable.

int i; (Declaration+Definition)

extern int i; (Declaration)


Pointers

        data_type * pointer_name;
for eg. int * p;
here p is a pointer of a memory location that stores integer value 
                    OR 
p stores address of a variable of type int

int a; ==> then &a represents address of a
p = &a; // so now p essentially points to address of a

p is also a variable that will be allocated a memory

* p = 10; this will modify the data stored at memory location of a

pointer can be helpful in accessing, reading/writing a given memory location.


suppose i want to point to 0x600
p = 0x600;
p+5 //now it will point to 0x605


//Structures
Struct is a user defined datatype
syntax of struct==>

struct student{
        int student_id;
        int class;
        int age;
        char * name;
};

struct student s;

To access student_id of this struct==> s.student_id


Bitwise Operators - Used to read/modify certain bit of a byte [Bitwise Manipulation]
1. AND Operator (&) - 
2. OR Operator (|) - 
3. XOR Operator (^) -
4. NOT Operator (~) -
5. Left Shift (<<) -
6. Right Shift (>>) -

eg. A = 10110101
    B = 01101101
  A&B = 00100101
  A|B = 11111101 
  A^B = 11011000
   ~A = 01001010
 A<<1 = 01101010
 A>>1 = 01011010

 Functions - 

 return_type function_name(argument); //Function Declaration
 for eg. 
 int add(int a, int b);

 return_type function_name(argument)    //Function Definition
 {
        // operations
        return data
 }

int add(int a, intb)
{
        int sum = a+b;
        return sum;
}


eg. f = add(5,3); //Function call